start <- lat[,c(1:5)]
end <- lat[,c(6:10)] %>% rename("date1" = "date","hour1" = "hour","minute1" = "minute"))
start <- lat[,c(1:5)]
end <- lat[,c(6:10)] %>% rename("date1" = "date","hour1" = "hour","minute1" = "minute")
start <- lat[,c(1:5)]
end <- lat[,c(6:10)] %>% rename("date" = "date1","hour" = "hour1","minute" = "minute1")
View(end)
View(end)
start <- lat[,c(1:5)]
end <- lat[,c(6:10)] %>% rename("date" = "date1","hour" = "hour1","minute" = "minute1")
sameday <- start %>% left_join(end, by = "date")
lat %>% count(date == date1) %>% filter(n > 1)
lat %>% count(hour == hour1) %>% filter(n > 1)
lat %>% count(date == date1, hour == hour1) %>% filter(n > 1)
start <- lat[,c(1:5)]
end <- lat[,c(6:10)] %>% rename("date" = "date1")
View(end)
View(end)
View(start)
View(start)
start <- lat[,c(1:5)]
end <- lat[,c(6:13)] %>% rename("date" = "date1")
start <- lat[,c(1:5)]
end <- lat[,c(6:13)] %>% rename("date" = "date1")
sameday <- start %>% left_join(end, by = "date")
#install.packages("tidyverse")
library(tidyverse)
library(lubridate)
#install.packages("OpenStreetMap")
library(OpenStreetMap)
library(ggplot2)
locations <- read.csv("Nice_Ride_2017_Station_Locations.csv")
trip <- read.csv("Nice_ride_trip_history_2017_season.csv")
locations <- read_csv("Nice_Ride_2017_Station_Locations.csv")
rides <- read_csv("Nice_ride_trip_history_2017_season.csv")
merged <- left_join(rides, locations, by = c("Start station number" = "Number")) %>%
left_join(locations, by = c("End station number" = "Number")) %>%
mutate(start_latitude = `Latitude.x`, start_longitude = `Longitude.x`, start_total_docks = `Total docks.x`) %>%
mutate(end_latitude = `Latitude.y`, end_longitude = `Longitude.y`, end_total_docks = `Total docks.y`) %>%
select(-`Name.x`, -`Name.y`, -`Latitude.x`, -`Longitude.x`, -`Total docks.x`, -`Latitude.y`, -`Longitude.y`, -`Total docks.y`)
merged <- merged[c(1:3, 9:11, 4:6, 12:14, 7:8)]
# Set latitudes and longitudes of city map
LAT1 <- 44.88     # Do not change
LAT2 <- 45.05     # Do not change
LON1 <- -93.35    # Do not change
LON2 <- -93.08    # Do not change
# Generate map
map <- openmap(c(LAT2,LON1), c(LAT1,LON2), zoom = NULL, # Can change zoom
type = "esri",                           # Can change
mergeTiles = TRUE)                       # Do not change
# Project map to latitude and longitude
map.latlon <- openproj(map, projection = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs") # Do not change
# Plot map of Minneapolis
autoplot(map.latlon) # Plots a map
# Plot all niceride stations
# If you are not plotting the map, use ggplot() instead of autoplot
#ggplot() +
autoplot(map.latlon) + # Plots a map
geom_point(data=locations,
aes(x=Longitude, y=Latitude),
color = 'blue', size = 1) +
labs(x='Longitude', y='Latitude') +
ggtitle('Locations of NiceRide Stations')
trip <- merged %>% separate(`Start date` , into = c("date","time"),sep = " ") %>% separate(time,into = c("hour","minute"),sep = ":")
trip$date <- mdy(trip$date)
trip$hour <- parse_integer(trip$hour)
trip$minute <- parse_integer(trip$minute)
hallo <- trip %>% filter(date == '2017-10-31',hour < 8)
# Plot rides for halloween morning
#ggplot() +
autoplot(map.latlon) + # Plots a map
geom_segment(data=hallo,
aes(x=start_longitude, y=start_latitude,
xend=end_longitude, yend=end_latitude),
color = 'blue', size = .5,
arrow = arrow(length = unit(0.2, "cm"))) +
labs(x='Longitude', y='Latitude') +
scale_x_continuous(limits = c(-93.3, -93.2)) +
scale_y_continuous(limits = c(44.93, 45.02)) +
ggtitle('Halloween Morning Rides')
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("date","time"),sep = " ") %>% separate(`End date`,into = c("date1","time1"),sep = " ") %>% separate(time,into = c("hour","minute"),sep = ":") %>% separate(time1,into = c("hour1","minute1"),sep = ":")
start <- lat[,c(1:5)]
end <- lat[,c(6:13)] %>% rename("date" = "date1")
lat %>% count(date == date1) %>% filter(n > 1)
lat %>% count(hour == hour1) %>% filter(n > 1)
lat %>% count(date == date1, hour == hour1) %>% filter(n > 1)
as.tibble(start)
as.tibble(start)
View(rides)
View(rides)
View(locations)
View(locations)
start <- lat[,c(1:5)]
end <- lat[,c(6:13)]
start <- lat[,c(1:5)]
end <- lat[,c(6:13)]
sameday <- left_join(start,end, by = c("date" = "date1"))
as.tibble(locations)
#install.packages("tidyverse")
library(tidyverse)
library(lubridate)
#install.packages("OpenStreetMap")
library(OpenStreetMap)
library(ggplot2)
locations <- read.csv("Nice_Ride_2017_Station_Locations.csv")
trip <- read.csv("Nice_ride_trip_history_2017_season.csv")
View(lat)
View(lat)
start <- lat[,c(1:5)]
end <- lat[,c(6:13)]
sameday <- left_join(lat, by = c("date" = "date1"))
start <- lat[,c(1:5)]
end <- lat[,c(6:13)]
sameday <- left_join(lat,lat, by = c("date" = "date1"))
start <- lat[,c(1:5)]
end <- lat[,c(6:13)] %>% rename("date" = "date1")
sameday <- start %>% inner_join(end, by = "date")
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("dateint","timeint"),sep = " ") %>% separate(`End date`,into = c("dateend","timeend"),sep = " ") %>% separate(time,into = c("hourint","minuteint"),sep = ":") %>% separate(time1,into = c("hourend","minuteend"),sep = ":")
#install.packages("tidyverse")
library(tidyverse)
library(lubridate)
#install.packages("OpenStreetMap")
library(OpenStreetMap)
library(ggplot2)
locations <- read.csv("Nice_Ride_2017_Station_Locations.csv")
trip <- read.csv("Nice_ride_trip_history_2017_season.csv")
locations <- read_csv("Nice_Ride_2017_Station_Locations.csv")
rides <- read_csv("Nice_ride_trip_history_2017_season.csv")
merged <- left_join(rides, locations, by = c("Start station number" = "Number")) %>%
left_join(locations, by = c("End station number" = "Number")) %>%
mutate(start_latitude = `Latitude.x`, start_longitude = `Longitude.x`, start_total_docks = `Total docks.x`) %>%
mutate(end_latitude = `Latitude.y`, end_longitude = `Longitude.y`, end_total_docks = `Total docks.y`) %>%
select(-`Name.x`, -`Name.y`, -`Latitude.x`, -`Longitude.x`, -`Total docks.x`, -`Latitude.y`, -`Longitude.y`, -`Total docks.y`)
merged <- merged[c(1:3, 9:11, 4:6, 12:14, 7:8)]
# Set latitudes and longitudes of city map
LAT1 <- 44.88     # Do not change
LAT2 <- 45.05     # Do not change
LON1 <- -93.35    # Do not change
LON2 <- -93.08    # Do not change
# Generate map
map <- openmap(c(LAT2,LON1), c(LAT1,LON2), zoom = NULL, # Can change zoom
type = "esri",                           # Can change
mergeTiles = TRUE)                       # Do not change
# Project map to latitude and longitude
map.latlon <- openproj(map, projection = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs") # Do not change
# Plot map of Minneapolis
autoplot(map.latlon) # Plots a map
# Plot all niceride stations
# If you are not plotting the map, use ggplot() instead of autoplot
#ggplot() +
autoplot(map.latlon) + # Plots a map
geom_point(data=locations,
aes(x=Longitude, y=Latitude),
color = 'blue', size = 1) +
labs(x='Longitude', y='Latitude') +
ggtitle('Locations of NiceRide Stations')
trip <- merged %>% separate(`Start date` , into = c("date","time"),sep = " ") %>% separate(time,into = c("hour","minute"),sep = ":")
trip$date <- mdy(trip$date)
trip$hour <- parse_integer(trip$hour)
trip$minute <- parse_integer(trip$minute)
hallo <- trip %>% filter(date == '2017-10-31',hour < 8)
# Plot rides for halloween morning
#ggplot() +
autoplot(map.latlon) + # Plots a map
geom_segment(data=hallo,
aes(x=start_longitude, y=start_latitude,
xend=end_longitude, yend=end_latitude),
color = 'blue', size = .5,
arrow = arrow(length = unit(0.2, "cm"))) +
labs(x='Longitude', y='Latitude') +
scale_x_continuous(limits = c(-93.3, -93.2)) +
scale_y_continuous(limits = c(44.93, 45.02)) +
ggtitle('Halloween Morning Rides')
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("dateint","timeint"),sep = " ") %>% separate(`End date`,into = c("dateend","timeend"),sep = " ") %>% separate(time,into = c("hourint","minuteint"),sep = ":") %>% separate(time1,into = c("hourend","minuteend"),sep = ":")
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("dateint","timeint"),sep = " ") %>% separate(`End date`,into = c("dateend","timeend"),sep = " ") %>% separate(time,into = c("hourint","minuteint"),sep = ":") %>% separate(time1,into = c("hourend","minuteend"),sep = ":")
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("date","time"),sep = " ") %>% separate(`End date`,into = c("date1","time1"),sep = " ") %>% separate(time,into = c("hour","minute"),sep = ":") %>% separate(time1,into = c("hour1","minute1"),sep = ":")
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("dateint","timeint"),sep = " ") %>% separate(`End date`,into = c("dateend","timeend"),sep = " ") %>% separate(time,into = c("hour","minute"),sep = ":") %>% separate(time1,into = c("hour1","minute1"),sep = ":")
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("dateint","timeint"),sep = " ") %>% separate(`End date`,into = c("dateend","timeend"),sep = " ") %>% separate(timeend,into = c("hourend","minuteend"),sep = ":") %>% separate(timeint,into = c("hourint","minuteint"),sep = ":")
View(lat)
str <- lat[,c(1:5)]
end <- lat[,c(6:13)]
str <- lat[,c(1:5)]
end <- lat[,c(6:13)]
str %>%
inner_join(end, by = "dateint" = "dateend")
str <- lat[,c(1:5)]
end <- lat[,c(6:13)]
str %>%
inner_join(end, by = c("dateint" = "dateend"))
View(str)
View(str)
str <- lat[,c(1:5)]
end <- lat[,c(6:13)] %>% rename("dateend" = "dateint")
str <- lat[,c(1:5)]
end <- lat[,c(6:13)] %>% rename("dateint" = "dateend")
str %>%
inner_join(end, by = c("dateint")
str <- lat[,c(1:5)]
end <- lat[,c(6:13)] %>% rename("dateint" = "dateend")
str %>%
inner_join(end, by = "dateint")
lat %>% count(date == date1) %>% filter(n > 1)
lat %>% count(dateint == dateend) %>% filter(n > 1)
lat %>% count(hourint == hourend) %>% filter(n > 1)
lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1)
lat %>% count(dateint == dateend) %>% filter(n > 1)
lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1)
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1)
as.tibble(returns)
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/(summarise(sum(n))))
sum(returns$n)
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n))
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n))
as.tibble(returns)
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n)) %>% arrange(desc(percent))
as.tibble(returns)
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n), same_day_return = `dateint==dateend`) %>% arrange(desc(percent))
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n), same_day_return = `dateint == dateend`) %>% arrange(desc(percent))
as.tibble(returns)
?muatate
?mutate
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n) %>% transmute(same_day_return = `dateint == dateend`) %>% arrange(desc(percent))
as.tibble(returns)
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n)) %>% transmute(same_day_return = `dateint == dateend`) %>% arrange(desc(percent))
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n) %>%  same_day_return = `dateint == dateend`) %>% arrange(desc(percent))
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n) %>%  same_day_return = `dateint == dateend`) %>% arrange(desc(percent))
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n) %>% arrange(desc(percent))
as.tibble(returns)
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n)) %>% arrange(desc(percent))
as.tibble(returns)
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n)) %>% arrange(desc(percent)) %>% transmute(SameDayReturn = `dateint == datend`)
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n)) %>% arrange(desc(percent)) %>% transmute(SameDayReturn = `dateint == dateend`)
as.tibble(returns)
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n),SameDayReturn = `dateint == dateend`,SameHourReturn = `hourint == hourend`) %>% arrange(desc(percent))
as.tibble(returns)
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n))%>% mutate(SameDayReturn = `dateint == dateend`,SameHourReturn = `hourint == hourend`) %>% arrange(desc(percent))
as.tibble(returns)
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n))%>% mutate(SameDayReturn = `dateint == dateend`,SameHourReturn = `hourint == hourend`) %>% arrange(desc(percent))
returns <- returns[,c(5,6,3,4)]
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n))%>% mutate(SameDayReturn = `dateint == dateend`,SameHourReturn = `hourint == hourend`) %>% arrange(desc(percent))
returns <- returns[,c(5,6,3,4)]
as.tibble(returns)
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("dateint","timeint"),sep = " ") %>% separate(`End date`,into = c("dateend","timeend"),sep = " ") %>% separate(timeend,into = c("hourend","minuteend"),sep = ":") %>% separate(timeint,into = c("hourint","minuteint"),sep = ":")
#str <- lat[,c(1:5)]
#end <- lat[,c(6:13)] %>% rename("dateint" = "dateend")
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n))%>% mutate(SameDayReturn = `dateint == dateend`,SameHourReturn = `hourint == hourend`) %>% arrange(desc(percent))
returns <- returns[,c(5,6,3,4)]
as.tibble(returns)
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n))%>% mutate(SameDayReturn = `dateint == dateend`,SameHourReturn = `hourint == hourend`) %>% arrange(desc(percent))
returns <- returns[,c(5,6,3,4)]
as.tibble(returns)
#install.packages("tidyverse")
library(tidyverse)
library(lubridate)
#install.packages("OpenStreetMap")
library(OpenStreetMap)
library(ggplot2)
locations <- read.csv("Nice_Ride_2017_Station_Locations.csv")
trip <- read.csv("Nice_ride_trip_history_2017_season.csv")
locations <- read_csv("Nice_Ride_2017_Station_Locations.csv")
rides <- read_csv("Nice_ride_trip_history_2017_season.csv")
merged <- left_join(rides, locations, by = c("Start station number" = "Number")) %>%
left_join(locations, by = c("End station number" = "Number")) %>%
mutate(start_latitude = `Latitude.x`, start_longitude = `Longitude.x`, start_total_docks = `Total docks.x`) %>%
mutate(end_latitude = `Latitude.y`, end_longitude = `Longitude.y`, end_total_docks = `Total docks.y`) %>%
select(-`Name.x`, -`Name.y`, -`Latitude.x`, -`Longitude.x`, -`Total docks.x`, -`Latitude.y`, -`Longitude.y`, -`Total docks.y`)
merged <- merged[c(1:3, 9:11, 4:6, 12:14, 7:8)]
# Set latitudes and longitudes of city map
LAT1 <- 44.88     # Do not change
LAT2 <- 45.05     # Do not change
LON1 <- -93.35    # Do not change
LON2 <- -93.08    # Do not change
# Generate map
map <- openmap(c(LAT2,LON1), c(LAT1,LON2), zoom = NULL, # Can change zoom
type = "esri",                           # Can change
mergeTiles = TRUE)                       # Do not change
# Project map to latitude and longitude
map.latlon <- openproj(map, projection = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs") # Do not change
# Plot map of Minneapolis
autoplot(map.latlon) # Plots a map
# Plot all niceride stations
# If you are not plotting the map, use ggplot() instead of autoplot
#ggplot() +
autoplot(map.latlon) + # Plots a map
geom_point(data=locations,
aes(x=Longitude, y=Latitude),
color = 'blue', size = 1) +
labs(x='Longitude', y='Latitude') +
ggtitle('Locations of NiceRide Stations')
trip <- merged %>% separate(`Start date` , into = c("date","time"),sep = " ") %>% separate(time,into = c("hour","minute"),sep = ":")
trip$date <- mdy(trip$date)
trip$hour <- parse_integer(trip$hour)
trip$minute <- parse_integer(trip$minute)
hallo <- trip %>% filter(date == '2017-10-31',hour < 8)
# Plot rides for halloween morning
#ggplot() +
autoplot(map.latlon) + # Plots a map
geom_segment(data=hallo,
aes(x=start_longitude, y=start_latitude,
xend=end_longitude, yend=end_latitude),
color = 'blue', size = .5,
arrow = arrow(length = unit(0.2, "cm"))) +
labs(x='Longitude', y='Latitude') +
scale_x_continuous(limits = c(-93.3, -93.2)) +
scale_y_continuous(limits = c(44.93, 45.02)) +
ggtitle('Halloween Morning Rides')
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("dateint","timeint"),sep = " ") %>% separate(`End date`,into = c("dateend","timeend"),sep = " ") %>% separate(timeend,into = c("hourend","minuteend"),sep = ":") %>% separate(timeint,into = c("hourint","minuteint"),sep = ":")
#str <- lat[,c(1:5)]
#end <- lat[,c(6:13)] %>% rename("dateint" = "dateend")
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n))%>% mutate(SameDayReturn = `dateint == dateend`,SameHourReturn = `hourint == hourend`) %>% arrange(desc(percent))
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("dateint","timeint"),sep = " ") %>% separate(`End date`,into = c("dateend","timeend"),sep = " ") %>% separate(timeend,into = c("hourend","minuteend"),sep = ":") %>% separate(timeint,into = c("hourint","minuteint"),sep = ":")
#str <- lat[,c(1:5)]
#end <- lat[,c(6:13)] %>% rename("dateint" = "dateend")
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n))%>% mutate(SameDayReturn = `dateint == dateend`,SameHourReturn = `hourint == hourend`) %>% arrange(desc(percent))
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("dateint","timeint"),sep = " ") %>% separate(`End date`,into = c("dateend","timeend"),sep = " ") %>% separate(timeend,into = c("hourend","minuteend"),sep = ":") %>% separate(timeint,into = c("hourint","minuteint"),sep = ":")
#str <- lat[,c(1:5)]
#end <- lat[,c(6:13)] %>% rename("dateint" = "dateend")
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n))%>% mutate(SameDayReturn = `dateint == dateend`,SameHourReturn = `hourint == hourend`) %>% arrange(desc(percent))
#install.packages("tidyverse")
library(tidyverse)
library(lubridate)
#install.packages("OpenStreetMap")
library(OpenStreetMap)
library(ggplot2)
locations <- read.csv("Nice_Ride_2017_Station_Locations.csv")
trip <- read.csv("Nice_ride_trip_history_2017_season.csv")
locations <- read_csv("Nice_Ride_2017_Station_Locations.csv")
rides <- read_csv("Nice_ride_trip_history_2017_season.csv")
merged <- left_join(rides, locations, by = c("Start station number" = "Number")) %>%
left_join(locations, by = c("End station number" = "Number")) %>%
mutate(start_latitude = `Latitude.x`, start_longitude = `Longitude.x`, start_total_docks = `Total docks.x`) %>%
mutate(end_latitude = `Latitude.y`, end_longitude = `Longitude.y`, end_total_docks = `Total docks.y`) %>%
select(-`Name.x`, -`Name.y`, -`Latitude.x`, -`Longitude.x`, -`Total docks.x`, -`Latitude.y`, -`Longitude.y`, -`Total docks.y`)
merged <- merged[c(1:3, 9:11, 4:6, 12:14, 7:8)]
# Set latitudes and longitudes of city map
LAT1 <- 44.88     # Do not change
LAT2 <- 45.05     # Do not change
LON1 <- -93.35    # Do not change
LON2 <- -93.08    # Do not change
# Generate map
map <- openmap(c(LAT2,LON1), c(LAT1,LON2), zoom = NULL, # Can change zoom
type = "esri",                           # Can change
mergeTiles = TRUE)                       # Do not change
# Project map to latitude and longitude
map.latlon <- openproj(map, projection = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs") # Do not change
# Plot map of Minneapolis
autoplot(map.latlon) # Plots a map
# Plot all niceride stations
# If you are not plotting the map, use ggplot() instead of autoplot
#ggplot() +
autoplot(map.latlon) + # Plots a map
geom_point(data=locations,
aes(x=Longitude, y=Latitude),
color = 'blue', size = 1) +
labs(x='Longitude', y='Latitude') +
ggtitle('Locations of NiceRide Stations')
trip <- merged %>% separate(`Start date` , into = c("date","time"),sep = " ") %>% separate(time,into = c("hour","minute"),sep = ":")
trip$date <- mdy(trip$date)
trip$hour <- parse_integer(trip$hour)
trip$minute <- parse_integer(trip$minute)
hallo <- trip %>% filter(date == '2017-10-31',hour < 8)
# Plot rides for halloween morning
#ggplot() +
autoplot(map.latlon) + # Plots a map
geom_segment(data=hallo,
aes(x=start_longitude, y=start_latitude,
xend=end_longitude, yend=end_latitude),
color = 'blue', size = .5,
arrow = arrow(length = unit(0.2, "cm"))) +
labs(x='Longitude', y='Latitude') +
scale_x_continuous(limits = c(-93.3, -93.2)) +
scale_y_continuous(limits = c(44.93, 45.02)) +
ggtitle('Halloween Morning Rides')
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("dateint","timeint"),sep = " ") %>% separate(`End date`,into = c("dateend","timeend"),sep = " ") %>% separate(timeend,into = c("hourend","minuteend"),sep = ":") %>% separate(timeint,into = c("hourint","minuteint"),sep = ":")
#str <- lat[,c(1:5)]
#end <- lat[,c(6:13)] %>% rename("dateint" = "dateend")
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n))%>% mutate(SameDayReturn = `dateint == dateend`,SameHourReturn = `hourint == hourend`) %>% arrange(desc(percent))
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("dateint","timeint"),sep = " ") %>% separate(`End date`,into = c("dateend","timeend"),sep = " ") %>% separate(timeend,into = c("hourend","minuteend"),sep = ":") %>% separate(timeint,into = c("hourint","minuteint"),sep = ":")
#str <- lat[,c(1:5)]
#end <- lat[,c(6:13)] %>% rename("dateint" = "dateend")
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
yeet <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1) %>% mutate(percent = n/sum(returns$n))%>% mutate(SameDayReturn = `dateint == dateend`,SameHourReturn = `hourint == hourend`) %>% arrange(desc(percent))
# trying to find average distance(in coordinates traveled)
lat <- merged %>% select(c(1,4,5,7,10,11,14)) %>% mutate(chnglat = abs(start_latitude-end_latitude), chnglong = abs(start_longitude-end_longitude)) %>% separate(`Start date`, into = c("dateint","timeint"),sep = " ") %>% separate(`End date`,into = c("dateend","timeend"),sep = " ") %>% separate(timeend,into = c("hourend","minuteend"),sep = ":") %>% separate(timeint,into = c("hourint","minuteint"),sep = ":")
#str <- lat[,c(1:5)]
#end <- lat[,c(6:13)] %>% rename("dateint" = "dateend")
#lat %>% count(dateint == dateend) %>% filter(n > 1)
#lat %>% count(hourint == hourend) %>% filter(n > 1)
returns <- lat %>% count(dateint == dateend, hourint == hourend) %>% filter(n > 1)
returns <- returns %>% mutate(percent = n/sum(returns$n))%>% mutate(SameDayReturn = `dateint == dateend`,SameHourReturn = `hourint == hourend`) %>% arrange(desc(percent))
returns <- returns[,c(5,6,3,4)]
returns
ggplot(data = returns, mapping = aes(x = n))+
geom_bar()
ggplot(data = returns, mapping = aes(x = n))+
geom_pit()
ggplot(data = returns, mapping = aes(x = n))+
geom_pie()
ggplot(data = returns, mapping = aes(x = n))+
geom_histogram()
ggplot(data = returns, mapping = aes(x = n))+
geom_bar()
ggplot(data = returns, mapping = aes(x = percentage))+
geom_histogram()
View(returns)
View(returns)
ggplot(data = returns, mapping = aes(x = percent))+
geom_histogram()
ggplot(data = returns, mapping = aes(x = percent))+
geom_histogram()+
facet_grid(SameDayReturns ~ SameHourReturns)
ggplot(data = returns, mapping = aes(x = n))+
geom_histogram()+
facet_grid(SameDayReturns ~ SameHourReturns)
ggplot(data = returns, mapping = aes())+
geom_histogram()+
facet_grid(SameDayReturns ~ SameHourReturns)
ggplot(data = returns, mapping = aes(x = n))+
geom_histogram()+
facet_grid(SameDayReturns ~ SameHourReturns)
ggplot(data = returns, mapping = aes(x = n))+
geom_histogram()+
facet_grid(SameDayReturns ~ .)
ggplot(data = returns, mapping = aes(x = n))+
geom_histogram()+
ggplot(data = returns, mapping = aes(x = n))+
geom_histogram()
View(lat)
ggplot(data = lat, mapping = aes(x = `Total Duration (seconds)`))+
geom_histogram()
ggplot(data = lat, mapping = aes(x = `Total Duration(seconds)`))+
geom_histogram()
names(lat)
ggplot(data = lat, mapping = aes(x = `Total Duration (Seconds)`))+
geom_histogram()
ggplot(data = lat, mapping = aes(x = `Total duration (Seconds)`))+
geom_histogram()
as.tibble(lat)
as.tibble(lat)
ggplot(data = lat, mapping = aes(x = `Total duration (Seconds)`))+
geom_hist()
as.tibble(lat)
ggplot(data = lat, mapping = aes(x = `Total duration (Seconds)`))
as.tibble(lat)
ggplot(data = lat, mapping = aes(x = `Total duration (Seconds)`))+
geom_bar()
View(lat)
